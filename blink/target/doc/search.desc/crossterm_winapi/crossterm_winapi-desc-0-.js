searchState.loadedDescShard("crossterm_winapi", 0, "The status of the mouse buttons. The least significant bit …\nA wrapper around a screen buffer.\nA wrapper around a screen buffer, focusing on calls to get …\nThe state of the control keys.\nThis is type represents the position of something on a …\nThe process’ console input buffer, <code>CONIN$</code>.\nThe process’ active console screen buffer, <code>CONOUT$</code>.\nThe second click (button press) of a double-click …\nThe type of mouse event. If this value is zero, it …\nA focus event occured. This is used only internally by …\nInformation about the font.\nThis abstracts away some WinAPI calls to set and get some …\nThe standard handles of a process.\nThe process’ standard input.\nAn input event.\nA keyboard event occurred.\nA keyboard input event.\nA menu event occurred. This is used only internally by …\nA mouse input event.\nThe mouse was moved or a mouse button was pressed.\nThe horizontal mouse wheel was moved.\nIf the high word of the dwButtonState member contains a …\nA change in mouse position occurred. The vertical mouse …\nThe process’ standard output.\nA wrapper around a screen buffer.\nInformation about a console screen buffer.\nA Windows semaphore.\nThis is type represents the size of something in width and …\nA console screen buffer was resized.\nThis is a wrapper for the locations of a rectangle.\nGet the current attributes of the characters that are …\nThe rectangle’s offset from the bottom.\nGet the size of the screen buffer.\nThe state of the mouse’s buttons.\nThe state of the control keys.\nThe state of the control keys.\nGet the result of a call to WinAPI that returns a <code>COORD</code> as …\nCreate new console screen buffer.\nGet the current console screen buffer\nGet the handle of the console input buffer.\nGet the handle of the active screen buffer. When using …\nGet the current column and row of the terminal cursor in …\nWhat type of mouse event it is.\nSets the character attributes for a specified number of …\nWrites a character to the console screen buffer a …\nGet the current font information like size and font index.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a <code>Console</code> instance who’s functions will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a handle from a raw handle.\nGet the underlying raw <code>HANDLE</code> used by this type to execute …\nAccess the underlying handle to the semaphore.\nGet the result of a call to WinAPI that returns a handle …\nWhether the control key has a state.\nGet the index of the font in the system’s console font …\nGet the screen buffer information like terminal size, …\nGet the handle of the input screen buffer.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the console handle is an invalid handle value.\nIf the key is pressed, this member is true. Otherwise, …\nRetrieves the size of the largest possible console window, …\nThe rectangle’s offset from the left.\nReturns whether the left button was pressed.\nReturns whether the right button was pressed.\nGet the console mode.\nThe position of the mouse when the event occurred in cell …\nCreate a new font info without all zeroed properties.\nCreate a new <code>ConsoleMode</code> instance.\nCreate a new console screen buffer without all zeroed …\nCreate a new handle of a certaint type.\nCreate a wrapper around a screen buffer from its handle.\nConstruct a new semaphore.\nCreate a new coordinate from its x and y position.\nCreate a new size instance by passing in the width and …\nGet the result of a call to WinAPI that returns a handle …\nGet the number of available input events that can be read …\nCreate new instance of <code>Console</code>.\nGet the handle of the standard output.\nRead all available input events without blocking.\nRead one input event.\nRelease a permit on the semaphore.\nGet whether no buttons are being pressed.\nThe repeat count, which indicates that a key is being held …\nGet the result of a call to WinAPI as an <code>io::Result</code>.\nThe rectangle’s offset from the right.\nReturns whether the right button was pressed.\nReturns whether there is a down scroll.\nReturns whether there is a horizontal scroll to the left.\nReturns whether there is a horizontal scroll to the right.\nReturns whether there is a up scroll.\nSets the current size and position of a console screen …\nSet the console mode to the given console mode.\nSet the console screen buffer size to the given size.\nSets the attributes of characters written to the console …\nSet this screen buffer to the current one.\nGet the size of the font.\nReturns the raw state.\nGet the size of the terminal display window.\nGet the position and size of the terminal display window.\nThe rectangle’s offset from the top.\nThe translated Unicode character (as a WCHAR, or utf-16 …\nA virtual-key code that identifies the given key in a …\nThe virtual scan code of the given key that represents the …\nWrites a character string to a console screen buffer …\nthe position on the x axis\nthe position on the y axis")